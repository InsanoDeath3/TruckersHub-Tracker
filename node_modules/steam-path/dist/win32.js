"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.lib = void 0;
const fs_1 = require("fs");
const regedit_1 = require("regedit");
function getSteamPath() {
    return __awaiter(this, void 0, void 0, function* () {
        // Windows requires querying registry, using regedit (npm package) for this
        const keys = yield regedit_1.promisified.list([
            "HKLM\\SOFTWARE\\WOW6432Node\\Valve\\Steam",
            "HKLM\\SOFTWARE\\Valve\\Steam",
            "HKCU\\SOFTWARE\\WOW6432Node\\Valve\\Steam",
            "HKCU\\SOFTWARE\\Valve\\Steam",
        ]);
        const entry = Object.values(keys).find((v) => !!v.exists && (!!v.values["InstallPath"] || !!v.values["SteamPath"]));
        if (!entry)
            throw new Error("Windows: Unable to find steam install path");
        const path = (entry.values["InstallPath"] || entry.values["SteamPath"])
            .value;
        if (!(0, fs_1.existsSync)(path))
            throw new Error("Windows: Steam install path does not exist");
        return path;
    });
}
exports.lib = {
    getSteamPath,
};
