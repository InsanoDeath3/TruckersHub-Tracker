"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAppPath = exports.getAppManifest = exports.getSteamPath = exports.getLibraryFolders = void 0;
const vdf_1 = require("@node-steam/vdf");
const fs_1 = require("fs");
const path_1 = require("path");
const util_1 = __importDefault(require("./util"));
/**
 * Parse libraryfolders.vdf and return contents.
 * If steamPath isn't provided it will attempt to find it.
 *
 * @param { string } [steamPath] *Optional* Steam installation path.
 * @return { Promise<LibraryFolders> } JSON object promise
 */
function getLibraryFolders(steamPath) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!steamPath)
            steamPath = yield util_1.default.getSteamPath();
        const steamApps = (0, path_1.join)(steamPath, "steamapps");
        const libraryfoldersPath = (0, path_1.join)(steamApps, "libraryfolders.vdf");
        if (!(0, fs_1.existsSync)(libraryfoldersPath))
            throw new Error("Unable to find libraryfolders.vdf");
        const libfolders = (0, vdf_1.parse)((0, fs_1.readFileSync)(libraryfoldersPath, {
            encoding: "utf-8",
        }));
        if (!libfolders)
            throw new Error("Unable to parsse libraryfolders.vdf");
        return libfolders;
    });
}
exports.getLibraryFolders = getLibraryFolders;
/**
 * Get Steam's installation path as well as any app library paths.
 *
 * @return { Promise<SteamPath> } Steam path and library paths promise
 */
function getSteamPath() {
    return __awaiter(this, void 0, void 0, function* () {
        const steamPath = yield util_1.default.getSteamPath();
        const libfolders = yield getLibraryFolders(steamPath);
        const libs = Object.entries(libfolders.libraryfolders).map(([_, { path }]) => path);
        return {
            path: steamPath,
            libs,
        };
    });
}
exports.getSteamPath = getSteamPath;
/**
 * Get an app's manifest file.
 *
 * @param { number } appId app's id
 * @return { Promise<AppManifest> } app's manifest data promise
 */
function getAppManifest(appId) {
    return __awaiter(this, void 0, void 0, function* () {
        const libfolders = (yield getLibraryFolders()).libraryfolders;
        const appLib = Object.entries(libfolders)
            .filter(([_, { apps }]) => !!apps[appId])
            .map(([_, { path }]) => (0, path_1.join)(path, "steamapps"));
        const manifests = appLib
            .map((path) => {
            const manifestPath = (0, path_1.join)(path, `appmanifest_${appId}.acf`);
            if (!(0, fs_1.existsSync)(manifestPath))
                return false;
            const manifest = (0, vdf_1.parse)((0, fs_1.readFileSync)(manifestPath, {
                encoding: "utf-8",
            }));
            if (!manifest)
                return false;
            manifest.library_path = path;
            return manifest;
        })
            .filter((v) => !!v);
        if (!manifests.length)
            throw new Error("Unable to find or parse appmanifest");
        // Typescript is unable to see that pop cannot return undefined here.
        return manifests.pop();
    });
}
exports.getAppManifest = getAppManifest;
/**
 * Get a Steam app's path from app id.
 *
 * @param { number } appId app's id
 * @returns { Promise<AppPath> } app path promise
 */
function getAppPath(appId) {
    return __awaiter(this, void 0, void 0, function* () {
        const manifest = yield getAppManifest(appId);
        return {
            name: manifest.AppState.name,
            path: (0, path_1.join)(manifest.library_path, "common", manifest.AppState.installdir),
        };
    });
}
exports.getAppPath = getAppPath;
